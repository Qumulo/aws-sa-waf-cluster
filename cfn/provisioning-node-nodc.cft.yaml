AWSTemplateFormatVersion: "2010-09-09"

# MIT License
#
# Copyright (c) 2021 Qumulo, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal 
# in the Software without restriction, including without limitation the rights 
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all 
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
# SOFTWARE.

Description: This template instantiates an EC2 instance for configuration of the Qumulo Cluster and is then shutdown.  Floating IPs, Sidecar role and permissions, EBS Volume Tags, and CMK Policy management are all configured.

Parameters:
  ProvisioningServerAMI:
    Description: "AWS Linux Server AMI"
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  SideCarProv:
    Type: String
  SecretsManagedPolicy:
    Type: String
  KeyName:
    Type: String
  Region:
    Type: String
  PrivateSubnetId:
    Type: String
  PrivateSubnetCidr:
    Type: String
  Node1IP:
    Type: String
  NodeIPs:
    Type: String
  FloatIPs:
    Type: String
  ClusterPwd:
    Type: String
  VPCID:
    Type: String
  SideCarSecretsArn:
    Type: String
  ClusterSecretsArn:
    Type: String
  SoftwareSecretsArn:
    Type: String
  CMK:
    Type: String
  StackName:
    Type: String
  BucketName:
    Type: String
  KeyPrefix:
    Type: String 
  BucketRegion:
    Type: String
  InstanceIDs: 
    Type: String
  QStackName:
    Type: String
  QClusterName:
    Type: String
  QClusterVersion:
    Type: String
  TermProtection:
    Type: String
  QPermissionsBoundary:
    Type: String

Conditions:
  ProvBoundary: !Not
    - !Equals
      - !Ref QPermissionsBoundary
      - ""

  ProvCMK: !Not
    - !Equals
      - !Ref CMK
      - ""

Resources:
  ProvisionerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable ports for Provisioning Management of Qumulo'
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Outbound traffic
          FromPort: 0
          IpProtocol: '-1'
          ToPort: 0
      SecurityGroupIngress:
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'SSH access for provisioning instance'
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'Cluster access to ngnix'
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'Cluster access to ngnix'
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

  ProvisionerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      PermissionsBoundary: !If [ProvBoundary, !Sub "arn:aws:iam::${AWS::AccountId}:policy/${QPermissionsBoundary}", !Ref "AWS::NoValue"]      
      ManagedPolicyArns:
        - !Ref SecretsManagedPolicy
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:ListObject"
                Resource:
                  - !Sub "arn:aws:s3:::${BucketName}/*"
                  - !Sub "arn:aws:s3:::${BucketName}"                 
        - PolicyName: Provisioner-EC2-Lambda-SSM
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:SetStackPolicy"
                  - "cloudformation:UpdateTerminationProtection"
                  - "cloudformation:DescribeStackResource"
                  - "ec2:DeleteTags"
                  - "ec2:CreateTags"
                  - "ec2:DescribeVolumes"
                  - "ec2:DescribeInstances"
                  - "ec2:ModifyInstanceAttribute"
                  - "lambda:ListFunctions"
                  - "lambda:GetFunction"
                  - "lambda:ListTags"
                  - "ssm:ListInstanceAssociations"
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
                  - "ssm:UpdateInstanceInformation"
                  - "kms:Decrypt"                  
                Resource: "*"
        - PolicyName: Provisioner-KMSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: !If [ProvCMK, Allow, Deny]
                Action:                   
                  - "kms:PutKeyPolicy"
                  - "kms:GetKeyPolicy"
                Resource: !If [ProvCMK, !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${CMK}", "*"]


  ProvisionerProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref ProvisionerRole

  CreationVersionSSM: 
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/qumulo/${QStackName}/creation-version"       
      Value: "null"
      Type: String

  InstalledVersionSSM: 
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/qumulo/${QStackName}/installed-version"       
      Value: "null"
      Type: String

  InstanceIDsSSM: 
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/qumulo/${QStackName}/instance-ids"       
      Value: "null"
      Type: String

  NodeIPsSSM: 
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/qumulo/${QStackName}/node-ips"       
      Value: "null"
      Type: String

  FloatIPsSSM: 
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/qumulo/${QStackName}/float-ips"       
      Value: "null"
      Type: String

  UuidSSM: 
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/qumulo/${QStackName}/uuid"       
      Value: "null"
      Type: String

  LastRunStatusSSM: 
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/qumulo/${QStackName}/last-run-status"       
      Value: "null"
      Type: String

  SideCarProvisionedSSM: 
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/qumulo/${QStackName}/sidecar-provisioned"       
      Value: "null"
      Type: String

  CMKPolicyModifiedSSM: 
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/qumulo/${QStackName}/cmk-policy-modified"       
      Value: "null"
      Type: String

  TerminationProtectionSSM: 
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/qumulo/${QStackName}/termination-protection"       
      Value: "null"
      Type: String      

  ProvisioningNode:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ""
            - - !Ref "AWS::StackName"
              - " - Qumulo Provisioning Node"
      ImageId: !Ref ProvisioningServerAMI
      InstanceType: m5.large
      InstanceInitiatedShutdownBehavior: stop
      IamInstanceProfile: !Ref ProvisionerProfile
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeleteOnTermination: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref ProvisionerSG
          SubnetId: !Ref PrivateSubnetId
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 40
            DeleteOnTermination: true
            Encrypted: false
      UserData:
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          #User data runs every boot cycle

          cd /root
          region="${Region}"
          q_stackname="${QStackName}"
          new_vpc="NO"
          sc_secrets_arn="${SideCarSecretsArn}"
          cluster_secrets_arn="${ClusterSecretsArn}"
          software_secrets_arn="${SoftwareSecretsArn}"
          protection="${TermProtection}"
          qqh="./qq --host ${Node1IP}"
          node_ips="${NodeIPs}"
          instance_ids="${InstanceIDs}"
          float_ips="${FloatIPs}"
          def_password=${ClusterPwd}
          cmk=${CMK}
          s3bkt="${BucketName}"
          s3pfx="${KeyPrefix}"
          serverIP=$(hostname -I | xargs)
          this_ec2=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
          sc_prov="NO"
          cmk_prov="NO"
          mod_FIPs="NO"
          bkt_pfx="$s3bkt/$s3pfx"
          req_ver="${QClusterVersion}"

          #Functions are getqq, ssmput, ssmget, getsecret, stackprotect, ec2protect, vercomp, cmkmodpolicy, tagvols
          if [[ -e "functions-v2.sh" ]]; then
            echo "functions-v2 exist"
          else
            aws s3 cp s3://$bkt_pfx"cfn-init/functions-v2.sh" ./functions-v2.sh --quiet
          fi
          source functions-v2.sh

          if [ $(curl -sL -w "%{http_code}\\n" "trends.qumulo.com" -o /dev/null --connect-timeout 3 --max-time 5) == "200" ]; then
            ssmput "last-run-status" "$region" "$q_stackname" "BOOTED. Public Internet Reachable"
            no_inet="false"
          else
            ssmput "last-run-status" "$region" "$q_stackname" "BOOTED. NO Public Internet Connectivity. VPC Endpoints must be provisioned for AWS Services."
            no_inet="true"
          fi

          ssmput "last-run-status" "$region" "$q_stackname" "Installing jq, qq, and nginx if needed and reading secrets"
          getqq "${Node1IP}" "qq"

          if yum list installed "jq" >/dev/null 2>&1; then
            echo "jq exists"
          else
            yum install -y jq
          fi

          if yum list installed "nginx.x86_64" >/dev/null 2>&1; then
            echo "nginx exists"
          else
            amazon-linux-extras install nginx1
          fi

          systemctl start nginx

          sc_username=$(getsecret "username" "$sc_secrets_arn" "$region" "false")
          sc_password=$(getsecret "password" "$sc_secrets_arn" "$region" "false")
          admin_password=$(getsecret "password" "$cluster_secrets_arn" "$region" "false")
          software_password=$(getsecret "password" "$software_secrets_arn" "$region" "true")

          IFS=', ' read -r -a newIDs <<< "$instance_ids"
          term_state=$(ssmget "termination-protection" "$region" "$q_stackname")
          
          if [ "$term_state" != "$protection" ]; then
            ssmput "last-run-status" "$region" "$q_stackname" "Updating Termination Protection. Enabled=$protection"
            stackprotect "$protection" "$region" "${StackName}"

            for m in "${!!newIDs[@]}"; do
              ec2protect "$protection" "$region" "${!newIDs[m]}"
            done

            ec2protect "$protection" "$region" "$this_ec2"
            ssmput "termination-protection" "$region" "$q_stackname" "$protection"
          fi

          ssmput "last-run-status" "$region" "$q_stackname" "Checking quorum state and boot status"

          out_quorum=0
          in_quorum=0
          IFS=', ' read -r -a nodeIPs <<< "$node_ips"
          for m in "${!!nodeIPs[@]}"; do
            until [ $(curl -sLk -w "%{http_code}\\n" "https://${!nodeIPs[m]}" -o /dev/null --connect-timeout 3 --max-time 5) == "200" ]; do
              sleep 5
              echo "Waiting for ${!nodeIPs[m]} to boot"
            done
            quorum=$(./qq --host ${!nodeIPs[m]} node_state_get)
            if [[ "$quorum" != *"ACTIVE"* ]]; then
              (( out_quorum = out_quorum + 1 ))
            else
              (( in_quorum = in_quorum + 1 ))
            fi
          done

          revision=$($qqh version | grep "revision_id")
          cur_ver=${!revision//[!0-9.]/}

          ssmput "installed-version" "$region" "$q_stackname" "$cur_ver"

          org_ver=$(ssmget "creation-version" "$region" "$q_stackname")

          if [ "$org_ver" == "null" ]; then
            ssmput "creation-version" "$region" "$q_stackname" "$cur_ver"
            org_ver=$cur_ver
          fi

          if [ $out_quorum -eq ${!#nodeIPs[@]} ] && [ $in_quorum -eq 0 ]; then
            ssmput "last-run-status" "$region" "$q_stackname" "All nodes out of quorum, NEW CLUSTER"

            new_cluster="true"

            aws s3 cp s3://$bkt_pfx"cfn-init/stack-policy.json" ./stack_policy.json
            aws cloudformation set-stack-policy --region $region --stack-name $q_stackname --stack-policy-body file://./stack_policy.json

            chk=$(vercomp $req_ver "4.2.1"; echo $?)
            chk1=$(vercomp $req_ver "4.2.2"; echo $?)
            if [ $chk -eq 0 ] || [ $chk1 -eq 0 ]; then
              ssmput "last-run-status" "$region" "$q_stackname" "Requested version $req_ver, but deploying 4.2.0. Upgrade to 4.2.3 or newer in the future."            
              req_ver=4.2.0
            fi

            if [ "$cur_ver" != "$req_ver" ]; then
              new_ver=$req_ver
            fi

            IFS=', ' read -r -a upgradeIPs <<< "$node_ips"
            IFS=', ' read -r -a upgradeIDs <<< "$instance_ids"

          elif [ $in_quorum -gt 3 ]; then
            ssmput "last-run-status" "$region" "$q_stackname" "4 or more nodes in quorum, checking for node additions"
            new_cluster="false"
            sc_done=$(ssmget "sidecar-provisioned" "$region" "$q_stackname")
            if [ "$sc_done" != "YES" ] && [ ${SideCarProv} == "YES" ]; then
              sc_prov="YES"
            fi

            cmk_done=$(ssmget "cmk-policy-modified" "$region" "$q_stackname")
            if [ "$cmk_done" != "YES" ] && [ ${SideCarProv} == "YES" ]; then
              cmk_prov="YES"
            fi

            IFS=', ' read -r -a newIPs <<< "$node_ips"
            IFS=', ' read -r -a oldIPs <<< $(ssmget "node-ips" "$region" "$q_stackname")
            for m in "${!!newIPs[@]}"; do
              if [[ ! "${!oldIPs[@]}" =~ "${!newIPs[m]}" ]]; then
                upgradeIPs+=(${!newIPs[m]})
              fi
            done

            IFS=', ' read -r -a oldIDs <<< $(ssmget "instance-ids" "$region" "$q_stackname")
            for m in "${!!newIDs[@]}"; do
              if [[ ! "${!oldIDs[@]}" =~ "${!newIDs[m]}" ]]; then
                upgradeIDs+=(${!newIDs[m]})
                ec2protect "$protection" "$region" "${!newIDs[m]}"                
              fi
            done

            IFS=', ' read -r -a newFIPs <<< "$float_ips"
            IFS=', ' read -r -a oldFIPs <<< $(ssmget "float-ips" "$region" "$q_stackname")
            if [ ${!#oldFIPs[@]} -eq ${!#newFIPs[@]} ]; then            
              for m in "${!!newFIPs[@]}"; do
                if [[ ! "${!oldFIPs[@]}" =~ "${!newFIPs[m]}" ]]; then
                  mod_FIPs="YES"
                  break
                fi
              done
            else
              mod_FIPs="YES"
            fi

            if [ ${!#upgradeIPs[@]} -gt 0 ]; then
              revision=$(./qq --host ${!upgradeIPs[0]} version | grep "revision_id")
              add_ver=${!revision//[!0-9.]/}
              add_nodes="true"
              if [ "$cur_ver" != "$add_ver" ]; then
                new_ver=$cur_ver
                cur_ver=$add_ver
              fi
            fi
          fi

          if [ -n "$new_ver" ]; then
            aws s3 cp s3://$bkt_pfx"cfn-init/upgrade-order.txt" ./order.txt --quiet
            IFS=", " read -r -a order <<< $(cat ./order.txt)

            for ((n=0; n<${!#order[@]}+1; n++)); do
              chk=$(vercomp $new_ver ${!order[n]}; echo $?)
              case $chk in
                0)  upver+=(${!order[n]}); break;;
                1)  upver+=($new_ver); break;;
                2)  chk2=$(vercomp ${!order[n]} $org_ver; echo $?)
                    if [ $chk2 -eq 2 ]; then
                      if [ $n -eq ${!#order[@]} ]; then
                        upver+=($new_ver)
                      else
                        upver+=(${!order[n]})
                      fi
                    fi;;
              esac
            done
     
            for n in ${!!upver[@]}; do
              sw_file="qumulo_upgrade_cloud_${!upver[n]}.qimg"
              f_path="s3://"$s3bkt"/"$s3pfx"upgrade/"$sw_file
              cd /usr/share/nginx/html
              if [ -e "$sw_file" ]; then
                echo "$sw_file already downloaded"
              elif [ "$no_inet" == "true" ]; then
                aws s3api head-object --region ${BucketRegion} --bucket $s3bkt --key $s3pfx"upgrade/"$sw_file || no_file="true"
                if [ "$no_file" == "true" ]; then
                  ssmput "last-run-status" "$region" "$q_stackname" "Software upgrade required, no Internet or no object $f_path"
                  exit
                else
                  aws s3 cp $f_path ./$sw_file --quiet
                  ssmput "last-run-status" "$region" "$q_stackname" "Downloading $f_path"
                fi
              else
                ssmput "last-run-status" "$region" "$q_stackname" "Downloading $sw_file from Trends.qumulo.com"
                wget "https://trends.qumulo.com/data/download/$sw_file?access_code=$software_password" --output-document=$sw_file --quiet
              fi
              cd /root

              ssmput "last-run-status" "$region" "$q_stackname" "Upgrading unconfigured nodes to ${!upver[n]}"

              upgrade_url=http://$serverIP/qumulo_upgrade_cloud_${!upver[n]}.qimg

              chk=$(vercomp $cur_ver "4.1.4"; echo $?)
              chk1=$(vercomp $cur_ver "4.1.0.1"; echo $?)

              if [ $chk -eq 2 ]; then
                up_set=unconfigured_upgrade_config_set
                up_stat=unconfigured_upgrade_status
              else
                up_set=upgrade_config_set
                up_stat=upgrade_status
              fi

              for m in "${!!upgradeIPs[@]}"; do
                if [ $m -eq 0 ] && ([ $chk -eq 2 ] || [ $chk1 -eq 1 ]); then
                  getqq "${!upgradeIPs[m]}" "qqu"
                fi
                ./qqu --host ${!upgradeIPs[m]} $up_set --path "$upgrade_url" --target "prepare" &
              done

              for m in "${!!upgradeIPs[@]}"; do
                until ./qqu --host ${!upgradeIPs[m]} $up_stat --monitor | grep -q "UPGRADE_PREPARED"; do
                  sleep 5
                  echo "Waiting for Upgrade Prep ${!upgradeIPs[m]}"
                done
                echo "Upgrade prepared ${!upgradeIPs[m]}"
              done

              for m in "${!!upgradeIPs[@]}"; do
                ./qqu --host ${!upgradeIPs[m]} $up_set --path "$upgrade_url" --target "arm" &
              done
             
              for m in "${!!upgradeIPs[@]}"; do
                while [ "${!upver[n]}" != "$cur_ver" ]; do
                  revision=$(./qqu --host ${!upgradeIPs[m]} --timeout 5 version | grep "revision_id") || revision="rebooting"
                  cur_ver=${!revision//[!0-9.]/}
                  sleep 5
                done
                echo "Node ${!upgradeIPs[m]} upgraded to $cur_ver"
              done
              ssmput "installed-version" "$region" "$q_stackname" "$cur_ver"
              sleep 10
            done
          fi

          if [ "$new_cluster" == "true" ]; then
            ip_list="$node_ips"
            primary_list=${!ip_list//,/ }

            getqq "${Node1IP}" "qq"

            ssmput "last-run-status" "$region" "$q_stackname" "Forming first quorum and configuring cluster"

            $qqh cluster_create --cluster-name ${QClusterName} --admin-password $def_password --accept-eula --host-instance-id $def_password --node-ips $primary_list
            until $qqh node_state_get | grep -q "ACTIVE"; do
              sleep 5
              echo "Waiting for Quorum"
            done
            echo "First Quorum formed"

            sc_prov="${SideCarProv}"
            cmk_prov=$sc_prov
            
            cluster_id=$($qqh node_state_get | grep "cluster_id" | tr -d '",')
            uuid=${!cluster_id//"cluster_id: "/}

            ssmput "uuid" "$region" "$q_stackname" "$uuid"
            ssmput "node-ips" "$region" "$q_stackname" "$node_ips"

            $qqh login -u admin -p $def_password
            $qqh network_mod_network --network-id 1 --floating-ip-ranges $float_ips
            $qqh audit_set_cloudwatch_config --enable --log-group-name /qumulo/${StackName} --region $region
            $qqh change_password -o $def_password -p $admin_password

            ssmput "float-ips" "$region" "$q_stackname" "$float_ips"

          elif [ "$add_nodes" == "true" ]; then
            ssmput "last-run-status" "$region" "$q_stackname" "Quorum already exists, adding nodes to cluster"

            delim=""
            halfFloatIPs=""
            for m in "${!!newFIPs[@]}"; do
              if [ $m -lt 40 ]; then
                halfFloatIPs="$halfFloatIPs$delim${!newFIPs[m]}"
                delim=", "
              fi
            done

            $qqh login -u admin -p $admin_password
            $qqh network_mod_network --network-id 1 --floating-ip-ranges $halfFloatIPs
            $qqh add_nodes --node-ips ${!upgradeIPs[@]}
            until ./qq --host ${!upgradeIPs[0]} node_state_get | grep -q "ACTIVE"; do
              sleep 5
              echo "Waiting for Quorum"
            done
            echo "Quorum formed"
            $qqh network_mod_network --network-id 1 --floating-ip-ranges $float_ips
            ssmput "node-ips" "$region" "$q_stackname" "$node_ips"
            ssmput "float-ips" "$region" "$q_stackname" "$float_ips"

          elif [ "$mod_FIPs" == "YES" ]; then
            ssmput "last-run-status" "$region" "$q_stackname" "Quorum already exists, no nodes to add, modifying floating IPs"
            $qqh login -u admin -p $admin_password
            $qqh network_mod_network --network-id 1 --floating-ip-ranges $float_ips
            ssmput "float-ips" "$region" "$q_stackname" "$float_ips"
          fi

          if [ "$sc_prov" == "YES" ]; then
            ssmput "last-run-status" "$region" "$q_stackname" "Provisioning Sidecar info on Cluster"

            $qqh login -u admin -p $admin_password
            $qqh auth_add_user --name $sc_username --primary-group Guests -p "$sc_password"
            $qqh auth_create_role --role $sc_username --description "Qumulo Sidecar User for AWS"
            $qqh auth_modify_role --role $sc_username -G PRIVILEGE_ANALYTICS_READ
            $qqh auth_modify_role --role $sc_username -G PRIVILEGE_CLUSTER_READ
            $qqh auth_modify_role --role $sc_username -G PRIVILEGE_FS_ATTRIBUTES_READ
            $qqh auth_modify_role --role $sc_username -G PRIVILEGE_NETWORK_READ
            $qqh auth_assign_role --role $sc_username --trustee $sc_username

            ssmput "sidecar-provisioned" "$region" "$q_stackname" "YES"
          fi

          if [ "$cmk_prov" == "YES" ]; then
            if [ -z "$cmk" ]; then
              echo "No CMK specified"
            else
              ssmput "last-run-status" "$region" "$q_stackname" "Applying CMK policy"
              aws s3 cp s3://$bkt_pfx"cfn-init/cmk-policy-skeleton.json" ./add_policy.json
              modcmkpolicy "$cmk" "$region" "${StackName}" "$new_vpc" "QSIDECARSTACK" "CloudQStack" "DiskRecoveryLambda"
              ssmput "cmk-policy-modified" "$region" "$q_stackname" "YES"
            fi
          fi

          ssmput "last-run-status" "$region" "$q_stackname" "Tagging untagged EBS volumes"
          tagvols "newIDs" "$region" "$q_stackname"

          ssmput "instance-ids" "$region" "$q_stackname" "$instance_ids"
          ssmput "last-run-status" "$region" "$q_stackname" "Shutting down provisioning instance"
          sleep 10
          poweroff

          --//
          
Outputs:
  ProvisionerSGID:
    Value: !Ref ProvisionerSG
